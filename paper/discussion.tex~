
\newcommand{\bm}{BM$_{inv}$}
\newcommand{\pvsinv}{PVS$_{inv}$}
\newcommand{\pvsref}{PVS$_{ref}$}
\newcommand{\unity}{UNITY$_{ref}$}


\section{Observations}
\label{observations}

It is possible  to compare the present  proof (\pvsref-proof) with two
other mechanized proofs of exactly  the  same algorithm: the proof  in
the  Boyer-Moore prover \cite{Rus:GC}, from  now on referred to as the
\bm-proof;  and  the  PVS  proof \cite{Hav:GC},   referred  to as  the
\pvsinv-proof.  Instead of being based on refinement, these two proofs
are  based on a statement of  the correctness criteria as an invariant
to be  proven about the implementation (the  third refinement step)\@. 
The \pvsinv-proof follows the  \bm-proof closely.  Basically  the same
invariants were used. The \pvsref-proof has the advantage over the two
other proofs, that the correctness criteria can be appreciated without
knowing the internal structure of the  implementation.  That is, we do
not need to know for example that the append operation is only applied
in   location {\sc Append} to  node  $X$, and only   if  $X$ is white. 
Hence, from    this perspective, the   refinement proof  represents an
improvement.  The \pvsref-proof has approximately the same size as the
\pvsinv-proof, in that basically the same  invariants and lemmas about
auxiliary  functions  need to be  proven  (19 invariant  lemmas and 57
function  lemmas).  Hence, one cannot  argue that the proof has become
any  simpler.  On the  contrary  in fact: since  we have  many levels,
there is more to prove.  Some invariants were  easier to discover when
using refinement, especially at  the top levels. In  particular nested
loops may be treated nicely with refinement, only introducing one loop
at a time.  In general, loops in the  algorithm to be verified are the
reason why invariant discovery is hard, and of course nested loops are
no better.   The main  lesson obtained  from the \pvsinv-proof  is the
importance of  invariant  discovery in safety  proofs.  Our experience
with the \pvsref-proof  is that refinement  does not relieve us of the
need to search for invariants. We had to come up with exactly the same
invariants in both cases, but the discovery process was different, and
perhaps more structured in the refinement proof.


%%% Local Variables: 
%%% mode: latex
%%% TeX-master: t
%%% End: 
