
Refinement3[
  NODES : posnat, 
  SONS  : posnat, 
  ROOTS : posnat] : THEORY

BEGIN

  ASSUMING
    roots_within : ASSUMPTION ROOTS <= NODES
  ENDASSUMING

  I2 : THEORY = Garbage_Collector2[NODES,SONS,ROOTS]
  I3 : THEORY = Garbage_Collector3[NODES,SONS,ROOTS]
  IMPORTING Garbage_Collector3_Inv[NODES,SONS,ROOTS]

  s     : VAR I3.State
  r1,r2 : VAR (I)
  n,k   : VAR Node
  i     : VAR Index
  cs    : VAR Colours

  abs(s):I2.State = 
    (# MU := CASES MU(s) OF
               MUTATE : MUTATE,
               COLOUR : COLOUR
             ENDCASES,
       CHI := CASES CHI(s) OF
                COLOUR_ROOTS : COLOUR_ROOTS,
                      TEST_I : PROPAGATE,
                 TEST_COLOUR : PROPAGATE,
                 COLOUR_SONS : PROPAGATE,
                      TEST_H : PROPAGATE, 
                       COUNT : PROPAGATE,
                     COMPARE : PROPAGATE,
                      TEST_L : TEST_L,
                      APPEND : APPEND
              ENDCASES,
       Q := Q(s),
       K := K(s),
       L := L(s),
       C := C(s),
       M := M(s)
     #)

  sim_mutate : LEMMA
    (EXISTS n,i,k: r2 = Rule_mutate(n,i,k)(r1)) IMPLIES
      EXISTS n,i,k: abs(r2) = Rule_mutate(n,i,k)(abs(r1))

  sim_colour_target : LEMMA
    r2 = Rule_colour_target(r1) IMPLIES
      abs(r2) = Rule_colour_target(abs(r1))

  sim_stop_colouring_roots : LEMMA
    r2 = Rule_stop_colouring_roots(r1) IMPLIES
      abs(r2) = Rule_stop_colouring_roots(abs(r1))

  sim_colour_root : LEMMA
    r2 = Rule_colour_root(r1) IMPLIES
      abs(r2) = Rule_colour_root(abs(r1))

  sim_stop_propagating : LEMMA
    r2 = Rule_stop_propagating(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_continue_propagating : LEMMA
    r2 = Rule_continue_propagating(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_white_node : LEMMA
    r2 = Rule_white_node(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_black_node : LEMMA
    r2 = Rule_black_node(r1) IMPLIES
      abs(r2) = abs(r1)
  
  sim_stop_colouring_sons : LEMMA
    r2 = Rule_stop_colouring_sons(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_colour_son : LEMMA
    r2 = Rule_colour_son(r1) IMPLIES
      (EXISTS n,i: abs(r2) = Rule_propagate(n,i)(abs(r1))) OR
      abs(r2) = abs(r1)

  sim_stop_counting : LEMMA
    r2 = Rule_stop_counting(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_continue_counting : LEMMA
    r2 = Rule_continue_counting(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_skip_white : LEMMA
    r2 = Rule_skip_white(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_count_black : LEMMA
    r2 = Rule_count_black(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_stop_colouring : LEMMA
    r2 = Rule_stop_colouring(r1) IMPLIES
      abs(r2) = Rule_stop_propagating(abs(r1)) OR
      abs(r2) = abs(r1)

  sim_continue_colouring : LEMMA
    r2 = Rule_continue_colouring(r1) IMPLIES
      abs(r2) = abs(r1)

  sim_stop_appending : LEMMA
    r2 = Rule_stop_appending(r1) IMPLIES
      abs(r2) = Rule_stop_appending(abs(r1))

  sim_continue_appending : LEMMA
    r2 = Rule_continue_appending(r1) IMPLIES
      abs(r2) = Rule_continue_appending(abs(r1))

  sim_black_to_white : LEMMA
    r2 = Rule_black_to_white(r1) IMPLIES
      abs(r2) = Rule_black_to_white(abs(r1))

  sim_append_white : LEMMA
    r2 = Rule_append_white(r1) IMPLIES
      abs(r2) = Rule_append_white(abs(r1))

  next_h : LEMMA
    next(r1,r2) IMPLIES next(abs(r1),abs(r2))

  R3 : THEORY = 
    Refinement[I2.O_State,
      I2.State,I2.init,I2.next,I2.proj,
      I3.State,I3.init,I3.next,I3.proj,
      abs,I]      

END Refinement3

