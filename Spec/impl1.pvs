
Garbage_Collector1[
  NODES : posnat, 
  SONS  : posnat, 
  ROOTS : posnat] : THEORY

BEGIN

  ASSUMING
    roots_within : ASSUMPTION ROOTS <= NODES
  ENDASSUMING

  IMPORTING Coloured_Memory[NODES,SONS,ROOTS]

  MuPC    : TYPE = {MUTATE,COLOUR}  
  CoPC    : TYPE = {COLOUR,TEST_L,APPEND}

  State   : TYPE = [# MU : MuPC, CHI : CoPC, 
                      Q : nat, L : nat , C : Colours, M : Memory #]

  O_State : TYPE = Memory

  s,s1,s2 : VAR State
  n,k     : VAR Node
  i       : VAR Index

  proj(s):O_State = M(s)

  init(s):bool = 
      MU(s) = MUTATE
    & CHI(s) = COLOUR 
    & M(s) = null_array


  %%%%%%%%%%%%%%%%%%%%%%%
  % The MUTATOR Process %
  %%%%%%%%%%%%%%%%%%%%%%%

  Rule_mutate(n,i,k)(s):State =
    IF MU(s) = MUTATE AND accessible(k)(M(s)) THEN 
      s WITH [M := set_son(n,i,k)(M(s)),
              Q := k,
              MU := COLOUR]
    ELSE 
      s
    ENDIF

  Rule_colour_target(s):State =
    IF MU(s) = COLOUR AND Q(s) < NODES THEN 
      s WITH [C := set_colour(Q(s),TRUE)(C(s)),
              MU := MUTATE]
    ELSE 
      s
    ENDIF

  MUTATOR(s1,s2):bool =
       (EXISTS n,i,k: s2 = Rule_mutate(n,i,k)(s1))
    OR s2 = Rule_colour_target(s1)


  %%%%%%%%%%%%%%%%%%%%%%%%%
  % The COLLECTOR Process %
  %%%%%%%%%%%%%%%%%%%%%%%%%

  Rule_stop_colouring(s):State =
    IF CHI(s) = COLOUR AND blackened(C(s),M(s)) THEN
      s WITH [L := 0, CHI := TEST_L]
    ELSE
      s
    ENDIF

  Rule_colour(n)(s):State =
    IF CHI(s) = COLOUR THEN
      s WITH [C := set_colour(n,TRUE)(C(s))]
    ELSE
      s
    ENDIF

  Rule_stop_appending(s):State =
    IF CHI(s) = TEST_L AND L(s) = NODES THEN
      s WITH [CHI := COLOUR]
    ELSE
      s
    ENDIF

  Rule_continue_appending(s):State =
    IF CHI(s) = TEST_L AND L(s) < NODES THEN
      s WITH [CHI := APPEND]
    ELSE 
      s 
    ENDIF

  Rule_black_to_white(s):State =
    IF CHI(s) = APPEND AND L(s) < NODES AND colour(L(s))(C(s)) THEN
      s WITH [C := set_colour(L(s),FALSE)(C(s)),
              L := L(s)+1,
              CHI := TEST_L]
    ELSE 
      s 
    ENDIF

  Rule_append_white(s):State =
    IF CHI(s) = APPEND AND L(s) < NODES AND NOT colour(L(s))(C(s)) THEN
      s WITH [M := append_to_free(L(s))(M(s)),
              L := L(s) + 1,
              CHI := TEST_L]
    ELSE 
      s 
    ENDIF

  COLLECTOR(s1,s2):bool =
       s2 = Rule_stop_colouring(s1) 
    OR (EXISTS n: s2 = Rule_colour(n)(s1))
    OR s2 = Rule_stop_appending(s1) 
    OR s2 = Rule_continue_appending(s1) 
    OR s2 = Rule_black_to_white(s1) 
    OR s2 = Rule_append_white(s1)

  %%%%%%%%%%%%%%%%%%%%%%%%%%%
  % The Transition Relation %
  %%%%%%%%%%%%%%%%%%%%%%%%%%%

  next(s1,s2):bool =
    MUTATOR(s1,s2) OR
    COLLECTOR(s1,s2) OR
    s2 = s1

END Garbage_Collector1


Garbage_Collector1_Inv[
  NODES : posnat, 
  SONS  : posnat, 
  ROOTS : posnat] : THEORY

BEGIN

  ASSUMING
    roots_within : ASSUMPTION ROOTS <= NODES
  ENDASSUMING

  IMPORTING Memory_Properties[NODES,SONS,ROOTS]
  IMPORTING Garbage_Collector1[NODES,SONS,ROOTS]
  IMPORTING Invariant_Predicates[State]

  s : VAR State

  inv1(s):bool =
    CHI(s)=APPEND AND L(s) < NODES AND accessible(L(s))(M(s)) 
      IMPLIES 
    colour(L(s))(C(s))

  inv2(s):bool =
    CHI(s)=TEST_L OR CHI(s)=APPEND IMPLIES blackened(L(s))(C(s),M(s))

  I : pred[State] = inv1 & inv2

  pi : pred[pred[State]] = preserved(init,next)(I)

  i_inv1 : LEMMA I IMPLIES inv1
  i_inv2 : LEMMA I IMPLIES inv2

  p_inv1 : LEMMA pi(inv1)
  p_inv2 : LEMMA pi(inv2)

  p_I : LEMMA pi(I)

  inv : LEMMA invariant(init,next)(I)

END Garbage_Collector1_Inv

